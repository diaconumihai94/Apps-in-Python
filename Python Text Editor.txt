from tkinter import *
from tkinter import filedialog
from tkinter import font
from tkinter import colorchooser
import os, sys
import win32api
import win32print

root = Tk()
root.title('My Text Editor')
root.geometry('1220x680')

# Set variable for open file name
global open_status_name
open_status_name = False
global selected
selected = False


def new_file():
    text_box.delete(1.0, END)
    root.title('New File')
    status_bar.config(text="Ready        ")
    global open_status_name
    open_status_name = False


def open_file():
    # Delete Previous Text
    text_box.delete(1.0, END)

    # Grab File Name
    text_file = filedialog.askopenfilename(initialdir="C:/Users/Michael/", title="Open File", filetypes=(
        ("Text Files", "*.txt"), ("HTML Files", "*.html"), ("Python Files", "*.py"), ("All Files", "*.*")))
    # Check to see if there is a file name
    if text_file:
        # Make file name global
        global open_status_name
        open_status_name = text_file
    # Update Status Bar
    name = text_file
    name = name.replace("C:/Users/Michael/", " ")
    status_bar.config(text=f'{name}        ')
    root.title(f'{name}')
    file_text = open(text_file, 'r')
    stuff = file_text.read()
    text_box.insert(END, stuff)
    text_file.close()
    open_status_name = False


# Save File
def save_file():
    global open_status_name
    if open_status_name:
        # Save File
        text_file = open(open_status_name, 'w')
        text_file.write(text_box.get(1.0, END))
        # Close File
        text_file.close()

        status_bar.config(text=f'Saved: {open_status_name}        ')
    else:
        save_as_file()


def save_as_file():
    text_file = filedialog.asksaveasfilename(defaultextension=".*", initialdir="C:/users/Michael/", title="Save File",
                                             filetypes=(("Text Files", "*.txt"), ("HTML Files", "*.html"),
                                                        ("Python Files", "*.py"), ("All Files", "*.*")))
    if text_file:
        name = text_file
        name = name.replace("C:/users/Michael/", " ")
        status_bar.config(text=f'{name}')
        root.title(f'{name}')

        # Save the File
        text_file = open(text_file, 'w')
        text_file.write(text_box.get(1.0, END))
        # Close the file
        text_file.close()


# Cut Text
def cut_text(e):
    global selected
    # Check to see if keyboard shortcut used
    if e:
        selected = root.clipboard_get()
    else:
        if text_box.selection_get():
            # Grab Selected text from text box
            selected = text_box.selection_get()
            # Delete selected text from text box
            text_box.delete("sel.first", "sel.last")
            # Clear the clipboard then append
            root.clipboard_clear()
            root.clipboard_append(selected)


# Paste text
def paste_text(e):
    global selected
    # Check to see if keyboard shortcut used
    if e:
        selected = root.clipboard_get()
    else:
        if selected:
            position = text_box.index(INSERT)
            text_box.insert(position, selected)


# Copy text
def copy_text(e):
    global selected
    # Check to see if we used keyboard shortcuts
    if e:
        selected = root.clipboard_get()
    if text_box.selection_get():
        # Grab selected text from text box
        selected = text_box.selection_get()
        # Clear the clipboard then append
        root.clipboard_clear()
        root.clipboard_append(selected)


# Bold Text
def bold_text():
    # Create font
    bold_font = font.Font(text_box, text_box.cget("font"))
    bold_font.configure(weight="bold")
    # Configure a tag
    text_box.tag_configure("bold", font=bold_font)
    # Define Current Tags
    current_tags = text_box.tag_names("sel.first")
    # if statement to see if Tag has been set
    if "bold" in current_tags:
        text_box.tag_remove("bold", "sel.first", "sel.last")
    else:
        text_box.tag_add("bold", "sel.first", "sel.last")


# Italics Text
def italics_text():
    # Create font
    italics_font = font.Font(text_box, text_box.cget("font"))
    italics_font.configure(slant="italic")
    # Configure a tag
    text_box.tag_configure("italic", font=italics_font)
    # Define Current Tags
    current_tags = text_box.tag_names("sel.first")
    # if statement to see if Tag has been set
    if "italic" in current_tags:
        text_box.tag_remove("italic", "sel.first", "sel.last")
    else:
        text_box.tag_add("italic", "sel.first", "sel.last")


# Change Text Color
def text_color():
    # Pick a color
    my_color = colorchooser.askcolor()[1]
    if my_color:
        # Create font
        color_font = font.Font(text_box, text_box.cget("font"))

        # Configure a tag
        text_box.tag_configure("colored", font=color_font, foreground=my_color)
        # Define Current Tags
        current_tags = text_box.tag_names("sel.first")
        # if statement to see if Tag has been set
        if "colored" in current_tags:
            text_box.tag_remove("colored", "sel.first", "sel.last")
        else:
            text_box.tag_add("colored", "sel.first", "sel.last")


# Change background color
def bg_color():
    my_color = colorchooser.askcolor()[1]
    if my_color:
        text_box.config(bg=my_color)


# Change all Text Color
def all_text_color():
    my_color = colorchooser.askcolor()[1]
    if my_color:
        text_box.config(fg=my_color)


# Print File
def print_file():
    # Grab File Name
    file_to_print = filedialog.askopenfilename(initialdir="C:/Users/Michael/", title="Open File", filetypes=(
        ("Text Files", "*.txt"), ("HTML Files", "*.html"), ("Python Files", "*.py"), ("All Files", "*.*")))
    if file_to_print:
        win32api.ShellExecute(0, "print", file_to_print, None, ".", 0)


# Select all text
def select_all(e):
    # Add sel tag to select all text
    text_box.tag_add('sel', '1.0', 'end')


# Clear all text
def clear_all():
    text_box.delete(1.0, END)


# Night Mode On
def night_mode_on():
    main_color = "#000000"
    second_color = "#373737"
    text_color = "green"

    root.config(bg=main_color)
    status_bar.config(bg=main_color, fg=text_color)
    text_box.config(bg=second_color)
    toolbar_frame.config(bg=main_color)
    # toolbar buttons
    bold_button.config(bg=second_color)
    italics_button.config(bg=second_color)
    color_text_button.config(bg=second_color)
    #file menu colors
    file_menu.config(bg=main_color, fg=text_color)
    edit_menu.config(bg=main_color, fg=text_color)
    color_menu.config(bg=main_color, fg=text_color)
    options_menu.config(bg=main_color, fg=text_color)


# Night Mode Off
def night_mode_off():
    main_color = "SystemButtonFace"
    second_color = "SystemButtonface"
    text_color = "black"

    root.config(bg=main_color)
    status_bar.config(bg=main_color, fg=text_color)
    text_box.config(bg="white")
    toolbar_frame.config(bg=main_color)
    # toolbar buttons
    bold_button.config(bg=second_color)
    italics_button.config(bg=second_color)
    color_text_button.config(bg=second_color)
    # file menu colors
    file_menu.config(bg=main_color, fg=text_color)
    edit_menu.config(bg=main_color, fg=text_color)
    color_menu.config(bg=main_color, fg=text_color)
    options_menu.config(bg=main_color, fg=text_color)


# Create a toolbar frame
toolbar_frame = Frame(root)
toolbar_frame.pack(fill=X)

# Create Frame
my_frame = Frame(root)
my_frame.pack(pady=5, padx=5)

# Create Scroll Bar
scroll_bar = Scrollbar(my_frame)
scroll_bar.pack(side=RIGHT, fill=Y)

# Horizontal Scrollbar
horizontal_scroll = Scrollbar(my_frame, orient='horizontal')
horizontal_scroll.pack(side=BOTTOM, fill=X)

# Create Text Box
text_box = Text(my_frame, width=97, height=25, font=("Helvetica", 16), selectbackground="yellow",
                selectforeground="black", yscrollcommand=scroll_bar.set, xscrollcommand=horizontal_scroll.set,
                wrap="none")
text_box.pack()

# Configure Scrollbars
scroll_bar.config(command=text_box.yview)
horizontal_scroll.config(command=text_box.xview)

# Create Menu
my_menu = Menu(root)
root.config(menu=my_menu)

file_menu = Menu(my_menu, tearoff=False)
my_menu.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="New", command=new_file)
file_menu.add_command(label="Open", command=open_file)
file_menu.add_command(label="Save", command=save_file)
file_menu.add_command(label="Save as", command=save_as_file)
file_menu.add_separator()
file_menu.add_command(label="Print File", command=print_file)
file_menu.add_separator()
file_menu.add_command(label="Quit", command=root.quit)

edit_menu = Menu(my_menu, tearoff=False)
my_menu.add_cascade(label="Edit", menu=edit_menu)
edit_menu.add_command(label="Cut", command=lambda: cut_text(False), accelerator="(Ctrl+x)")
edit_menu.add_command(label="Copy", command=lambda: copy_text(False), accelerator="(Ctrl+c)")
edit_menu.add_command(label="Paste", command=lambda: paste_text(False), accelerator="(Ctrl+v)")
edit_menu.add_separator()
edit_menu.add_command(label="Undo", command=text_box.edit_undo, accelerator="(Ctrl+z)")
edit_menu.add_command(label="Redo", command=text_box.edit_redo, accelerator="(Ctrl+y)")
edit_menu.add_separator()
edit_menu.add_command(label="Select All", command=lambda: select_all(True), accelerator="(Ctrl+a)")
edit_menu.add_command(label="Clear", command=clear_all)

# Add color menu
color_menu = Menu(my_menu, tearoff=False)
my_menu.add_cascade(label="Colors", menu=color_menu)
color_menu.add_command(label="Selected Text", command=text_color)
color_menu.add_command(label="All Text", command=all_text_color)
color_menu.add_command(label="Background", command=bg_color)

# Add Options menu
options_menu = Menu(my_menu, tearoff=False)
my_menu.add_cascade(label="Options", menu=options_menu)
options_menu.add_command(label="Night Mode On", command=night_mode_on)
options_menu.add_command(label="Night Mode Off", command=night_mode_off)

# Add Status Bar
status_bar = Label(root, text="Ready        ", anchor=E)
status_bar.pack(fill=X, side=BOTTOM, ipady=15)

# Edit Bindings
root.bind('<Control-Key-x>', cut_text)
root.bind('<Control-Key-c>', copy_text)
root.bind('<Control-Key-V>', paste_text)

# Select Bindings
root.bind('Control-A', select_all)
root.bind('Control-a', select_all)
# Create Bold, Italics Buttons
bold_button = Button(toolbar_frame, text="Bold", command=bold_text)
bold_button.grid(row=0, column=0, sticky=W, padx=5)
italics_button = Button(toolbar_frame, text="Italics", command=italics_text)
italics_button.grid(row=0, column=1)

# Text Color
color_text_button = Button(toolbar_frame, text="Text Color", command=text_color)
color_text_button.grid(row=0, column=2, padx=5)

root.mainloop()
